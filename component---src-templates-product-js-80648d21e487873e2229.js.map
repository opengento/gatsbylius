{"version":3,"sources":["webpack:///./src/components/Configurator.js","webpack:///./src/components/Price.js","webpack:///./src/templates/product.js"],"names":["Configurator","variants","onChange","optionList","map","option","index","key","name","event","find","target","value","Price","props","price","current","currency","ProductBreadcrumb","product","itemScope","itemType","className","itemProp","to","ProductSynthesis","useState","selectedVariant","selectVariant","channelCode","variant","query","Product","data","fixed","localImage","childImageSharp","description","code","averageRating","allProduct","nodes","slug"],"mappings":"uKAceA,G,UAZM,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAC3BC,EAAaF,EAASG,KAAI,SAACC,EAAQC,GAAT,OAAmB,4BAAQC,IAAKD,GAAQD,EAAOG,SAE7E,OAAO,6BACL,4BAAQN,SAAU,SAACO,GACjBP,EAASD,EAASS,MAAK,qBAAEF,OAAmBC,EAAME,OAAOC,YAEtDT,MCGMU,EATD,SAACC,GAAD,OAAW,2BAAG,gCAASA,EAAMC,MAAMC,QAAU,IAA/B,IAAqCF,EAAMC,MAAME,Y,2DCK7E,IAAMC,EAAoB,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC1B,OAAO,yBAAKC,WAAS,EAACC,SAAS,mCAAmCC,UAAU,IACpE,0BAAMC,SAAS,kBAAkBH,WAAS,EAACC,SAAS,8BAClD,kBAAC,OAAD,CAAMG,GAAE,gBAAkB,0BAAMD,SAAS,QAAO,0BAAMA,SAAS,QAAf,iBAFnD,KAIL,8BAAOJ,EAAQX,QAIbiB,EAAmB,SAAC,GAAe,IAAdN,EAAa,EAAbA,QAAa,EACGO,mBAAS,MAA3CC,EAD+B,KACdC,EADc,KAGtC,OAAO,kBAAC,WAAD,KACL,wBAAIN,UAAU,gBAAgBH,EAAQX,MACtC,2BAAIW,EAAQU,aAGVF,EACI,kBAAC,EAAD,CAAOZ,MAAOY,EAAgBZ,QAC9B,kBAAC,EAAD,CAAOA,MAAOI,EAAQlB,SAAS,GAAGc,QAGxC,kBAAC,EAAD,CAAcd,SAAUkB,EAAQlB,SAAUC,SAAU,SAAC4B,GAAD,OAAaF,EAAcE,QAyCtEC,GAFEC,UAnCC,SAAAlB,GACd,OACE,kBAAC,IAAD,KACE,yBAAKQ,UAAU,wBACb,kBAAC,EAAD,CAAmBH,QAASL,EAAMmB,KAAKd,UAEvC,kBAAC,IAAD,CAAKe,MAAOpB,EAAMmB,KAAKd,QAAQgB,WAAWC,gBAAgBF,QAE1D,kBAAC,EAAD,CAAkBf,QAASL,EAAMmB,KAAKd,UAEtC,uCACA,2BAAIL,EAAMmB,KAAKd,QAAQkB,aAEvB,yCACA,4BACE,qCAAWvB,EAAMmB,KAAKd,QAAQmB,MAC9B,+CAAqBxB,EAAMmB,KAAKd,QAAQoB,cAAe,QAG3D,yBAAKjB,UAAU,cACX,+CACA,4BACGR,EAAMmB,KAAKO,WAAWC,MAAMrC,KAAI,SAAAe,GAC/B,OACE,wBAAIZ,IAAKY,EAAQuB,MACf,2BAAG,kBAAC,OAAD,CAAMlB,GAAE,YAAcL,EAAQuB,MAASvB,EAAQX,eAYlD","file":"component---src-templates-product-js-80648d21e487873e2229.js","sourcesContent":["import React from \"react\";\n\nconst Configurator = ({variants, onChange}) => {\n  let optionList = variants.map((option, index) => <option key={index}>{option.name}</option>)\n\n  return <div>\n    <select onChange={(event) => {\n      onChange(variants.find(({name}) => name === event.target.value))\n    }}>\n        {optionList}\n    </select>\n  </div>\n}\n\nexport default Configurator\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Price = (props) => <p><strong>{props.price.current / 100} {props.price.currency}</strong></p>\n\nPrice.propTypes = {\n  price: PropTypes.shape({\n    current: PropTypes.number.isRequired,\n    currency: PropTypes.oneOf(['USD', 'EUR'])\n  })\n}\n\nexport default Price\n","import { graphql } from 'gatsby'\nimport React, {Fragment, useState} from \"react\"\nimport { Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Configurator from \"../components/Configurator\"\nimport Price from \"../components/Price\"\nimport Img from \"gatsby-image\"\n\nconst ProductBreadcrumb = ({product}) => {\n  return <div itemScope itemType=\"http://schema.org/BreadcrumbList\" className=\"\">\n          <span itemProp=\"itemListElement\" itemScope itemType=\"http://schema.org/ListItem\">\n            <Link to={`/categories/`}><span itemProp=\"item\"><span itemProp=\"name\">main_taxon</span></span></Link>\n          </span> /\n    <span>{product.name}</span>\n  </div>\n}\n\nconst ProductSynthesis = ({product}) => {\n  const [selectedVariant, selectVariant] = useState(null)\n\n  return <Fragment>\n    <h1 className=\"product-name\">{product.name}</h1>\n    <p>{product.channelCode}</p>\n\n    {\n      selectedVariant\n        ? <Price price={selectedVariant.price}/>\n        : <Price price={product.variants[0].price} />\n    }\n\n    <Configurator variants={product.variants} onChange={(variant) => selectVariant(variant)} />\n  </Fragment>\n}\n\nconst Product = props => {\n  return (\n    <Layout>\n      <div className=\"product-informations\">\n        <ProductBreadcrumb product={props.data.product} />\n\n        <Img fixed={props.data.product.localImage.childImageSharp.fixed} />\n\n        <ProductSynthesis product={props.data.product} />\n\n        <h5>DÃ©tails</h5>\n        <p>{props.data.product.description}</p>\n\n        <h5>Attributs</h5>\n        <ul>\n          <li>Code: {props.data.product.code}</li>\n          <li>Average Rating: {props.data.product.averageRating}{'/5'}</li>\n        </ul>\n      </div>\n      <div className=\"cross-sell\">\n          <h4>Autres produits</h4>\n          <ul>\n            {props.data.allProduct.nodes.map(product => {\n              return (\n                <li key={product.slug}>\n                  <p><Link to={`/product/${product.slug}`}>{product.name}</Link></p>\n                </li>\n              )\n            })}\n          </ul>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Product\n\nexport const query = graphql`\n  query ProductPageQuery($slug: String) {\n    product(slug: { eq: $slug }) {\n      code\n      slug\n      name\n      description\n      channelCode\n      averageRating\n      variants {\n        price {\n          currency\n          current\n        }\n        name\n      }\n      localImage {\n        childImageSharp {\n          # Specify the image processing specifications right in the query.\n          # Makes it trivial to update as your page's design changes.\n          fixed(width: 400, height: 300) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n\n    allProduct {\n      nodes {\n        name\n        slug\n        localImage {\n          childImageSharp {\n            # Specify the image processing specifications right in the query.\n            # Makes it trivial to update as your page's design changes.\n            fixed(width: 125, height: 125) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}