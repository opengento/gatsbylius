{"version":3,"sources":["webpack:///./src/components/Configurator.js","webpack:///./src/components/Price.js","webpack:///./src/templates/product.js"],"names":["Configurator","variants","onChange","length","optionList","map","option","index","key","name","event","find","target","value","Price","props","price","current","currency","ProductBreadcrumb","product","itemScope","itemType","itemProp","to","taxons","main","ProductSynthesis","useState","selectedVariant","selectVariant","className","channelCode","variant","query","Product","data","fixed","localImage","childImageSharp","description","code","averageRating","allProduct","nodes","slug"],"mappings":"uKAuBeA,G,UArBM,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAChC,GAAwB,IAApBD,EAASE,OACX,OAAO,KAET,IAAMC,EAAaH,EAASI,KAAI,SAACC,EAAQC,GAAT,OAC9B,4BAAQC,IAAKD,GAAQD,EAAOG,SAG9B,OACE,6BACE,4BACEP,SAAU,SAAAQ,GACRR,EAASD,EAASU,MAAK,qBAAGF,OAAoBC,EAAME,OAAOC,YAG5DT,MCLMU,EATD,SAACC,GAAD,OAAW,2BAAG,gCAASA,EAAMC,MAAMC,QAAU,IAA/B,IAAqCF,EAAMC,MAAME,Y,2DCK7E,IAAMC,EAAoB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3B,OACE,yBAAKC,WAAS,EAACC,SAAS,oCACtB,0BACEC,SAAS,kBACTF,WAAS,EACTC,SAAS,8BAET,kBAAC,OAAD,CAAME,GAAG,KACP,0BAAMD,SAAS,QACb,0BAAMA,SAAS,QAAf,iBAGE,IAXV,IAYI,IACF,0BACEA,SAAS,kBACTF,WAAS,EACTC,SAAS,8BAET,kBAAC,OAAD,CAAME,GAAE,eAAiBJ,EAAQK,OAAOC,MACtC,0BAAMH,SAAS,QACb,0BAAMA,SAAS,QAAQH,EAAQK,OAAOC,SAGpC,IAvBV,KAwBI,8BAAON,EAAQX,QAKjBkB,EAAmB,SAAC,GAAiB,IAAfP,EAAc,EAAdA,QAAc,EACCQ,mBAAS,MAA3CC,EADiC,KAChBC,EADgB,KAGxC,OACE,kBAAC,WAAD,KACE,wBAAIC,UAAU,gBAAgBX,EAAQX,MACtC,2BAAIW,EAAQY,aAEXH,EACC,kBAAC,EAAD,CAAOb,MAAOa,EAAgBb,QAE9B,kBAAC,EAAD,CAAOA,MAAOI,EAAQnB,SAAS,GAAGe,QAGpC,kBAAC,EAAD,CACEf,SAAUmB,EAAQnB,SAClBC,SAAU,SAAA+B,GAAO,OAAIH,EAAcG,QAgD9BC,GAFEC,UAxCC,SAAApB,GACd,OACE,kBAAC,IAAD,KACE,yBAAKgB,UAAU,wBACb,kBAAC,EAAD,CAAmBX,QAASL,EAAMqB,KAAKhB,UAEvC,kBAAC,IAAD,CAAKiB,MAAOtB,EAAMqB,KAAKhB,QAAQkB,WAAWC,gBAAgBF,QAE1D,kBAAC,EAAD,CAAkBjB,QAASL,EAAMqB,KAAKhB,UAEtC,uCACA,2BAAIL,EAAMqB,KAAKhB,QAAQoB,aAEvB,0CACA,4BACE,qCAAWzB,EAAMqB,KAAKhB,QAAQqB,MAC9B,+CACmB1B,EAAMqB,KAAKhB,QAAQsB,cACnC,QAIP,yBAAKX,UAAU,cACb,8CACA,4BACGhB,EAAMqB,KAAKO,WAAWC,MAAMvC,KAAI,SAAAe,GAC/B,OACE,wBAAIZ,IAAKY,EAAQyB,MACf,2BACE,kBAAC,OAAD,CAAMrB,GAAE,YAAcJ,EAAQyB,MAASzB,EAAQX,eAa/C","file":"component---src-templates-product-js-5a23c5714ebf308734d7.js","sourcesContent":["import React from \"react\"\n\nconst Configurator = ({ variants, onChange }) => {\n  if (variants.length === 1) {\n    return null\n  }\n  const optionList = variants.map((option, index) => (\n    <option key={index}>{option.name}</option>\n  ))\n\n  return (\n    <div>\n      <select\n        onChange={event => {\n          onChange(variants.find(({ name }) => name === event.target.value))\n        }}\n      >\n        {optionList}\n      </select>\n    </div>\n  )\n}\n\nexport default Configurator\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Price = (props) => <p><strong>{props.price.current / 100} {props.price.currency}</strong></p>\n\nPrice.propTypes = {\n  price: PropTypes.shape({\n    current: PropTypes.number.isRequired,\n    currency: PropTypes.oneOf(['USD', 'EUR'])\n  })\n}\n\nexport default Price\n","import { graphql } from \"gatsby\"\nimport React, { Fragment, useState } from \"react\"\nimport { Link } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Configurator from \"../components/Configurator\"\nimport Price from \"../components/Price\"\nimport Img from \"gatsby-image\"\n\nconst ProductBreadcrumb = ({ product }) => {\n  return (\n    <div itemScope itemType=\"http://schema.org/BreadcrumbList\">\n      <span\n        itemProp=\"itemListElement\"\n        itemScope\n        itemType=\"http://schema.org/ListItem\"\n      >\n        <Link to=\"/\">\n          <span itemProp=\"item\">\n            <span itemProp=\"name\">Gatsbylius</span>\n          </span>\n        </Link>\n      </span>{\" \"}\n      /{\" \"}\n      <span\n        itemProp=\"itemListElement\"\n        itemScope\n        itemType=\"http://schema.org/ListItem\"\n      >\n        <Link to={`/categories/${product.taxons.main}`}>\n          <span itemProp=\"item\">\n            <span itemProp=\"name\">{product.taxons.main}</span>\n          </span>\n        </Link>\n      </span>{\" \"}\n      / <span>{product.name}</span>\n    </div>\n  )\n}\n\nconst ProductSynthesis = ({ product }) => {\n  const [selectedVariant, selectVariant] = useState(null)\n\n  return (\n    <Fragment>\n      <h1 className=\"product-name\">{product.name}</h1>\n      <p>{product.channelCode}</p>\n\n      {selectedVariant ? (\n        <Price price={selectedVariant.price} />\n      ) : (\n        <Price price={product.variants[0].price} />\n      )}\n\n      <Configurator\n        variants={product.variants}\n        onChange={variant => selectVariant(variant)}\n      />\n    </Fragment>\n  )\n}\n\nconst Product = props => {\n  return (\n    <Layout>\n      <div className=\"product-informations\">\n        <ProductBreadcrumb product={props.data.product} />\n\n        <Img fixed={props.data.product.localImage.childImageSharp.fixed} />\n\n        <ProductSynthesis product={props.data.product} />\n\n        <h5>Details</h5>\n        <p>{props.data.product.description}</p>\n\n        <h5>Attributes</h5>\n        <ul>\n          <li>Code: {props.data.product.code}</li>\n          <li>\n            Average Rating: {props.data.product.averageRating}\n            {\"/5\"}\n          </li>\n        </ul>\n      </div>\n      <div className=\"cross-sell\">\n        <h4>Other products</h4>\n        <ul>\n          {props.data.allProduct.nodes.map(product => {\n            return (\n              <li key={product.slug}>\n                <p>\n                  <Link to={`/product/${product.slug}`}>{product.name}</Link>\n                </p>\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Product\n\nexport const query = graphql`\n  query ProductPageQuery($slug: String) {\n    product(slug: { eq: $slug }) {\n      code\n      slug\n      name\n      description\n      channelCode\n      averageRating\n      taxons {\n        main\n      }\n      variants {\n        price {\n          currency\n          current\n        }\n        name\n      }\n      localImage {\n        childImageSharp {\n          # Specify the image processing specifications right in the query.\n          # Makes it trivial to update as your page's design changes.\n          fixed(width: 400, height: 300) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n\n    allProduct {\n      nodes {\n        name\n        slug\n        localImage {\n          childImageSharp {\n            # Specify the image processing specifications right in the query.\n            # Makes it trivial to update as your page's design changes.\n            fixed(width: 125, height: 125) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}